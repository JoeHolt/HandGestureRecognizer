import numpy as np
import os
import cv2
import imutils
from scipy.ndimage import gaussian_filter
from copy import copy

class HandReader:
    """
    Hand segmenter based off of
    https://gogul.dev/software/hand-gesture-recognition-p1
    """
    
    def __init__(self):
        self.bg = None

    def run_avg(self, image, aWeight):
	# initialize the background
	if self.bg is None:
	    bg = image.copy().astype("float")
	else:
	    cv2.accumulateWeighted(image, bg, aWeight)

    def segment(image, threshold=25):
	global bg
	diff = cv2.absdiff(bg.astype("uint8"), image) # find different between averaged bacground

	thresholded = cv2.threshold(diff, threshold, 255, cv2.THRESH_BINARY)[1] # seperate forground and bg

	(_, cnts, _) = cv2.findContours(thresholded.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE) # get areas in thresh

	if len(cnts) == 0:
	    return
	else:
	    segmented = max(cnts, key=cv2.contourArea) # get the biggest segment
	    return (thresholded, segmented)




    def baseImageSet(self):
        return self.im_base is not None

    def setBaseImage(self, img):
        """
        Sets base image to the passed image value
        """
        self.im_base = self._cvt_gray(img)

    def segmentImage(self, fg):
        # gray
        fg_gray = self._cvt_gray(fg)
        # segment
        diff = fg_gray - self.im_base
        # mask
        diff_bg_idxs = (diff < 200)
        # smooth
        smoothed = gaussian_filter(diff_bg_idxs, sigma=0.2)
        smoothed = np.invert(smoothed)
        # apply
        applied = copy(fg)
        applied[smoothed == True] = 0

        return applied
        


    def _cvt_gray(self, img):
        """
        Converts passed image to BW image based on a threshold
        """
        return cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
